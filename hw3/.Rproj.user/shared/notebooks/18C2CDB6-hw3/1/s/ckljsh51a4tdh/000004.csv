"0","### main ###"
"0","dataset = load.data.pokemon()"
"0","dataset_new = load.data.clean(dataset)"
"0","#get best gamma and cost for svm"
"0","#grid.search(dataset_new)"
"0","#get all [predictions,actual]"
"0","pred.lr = k.fold.cv(dataset_new,'lr')"
"0","pred.knn1 = k.fold.cv(dataset_new,'knn',1)"
"0","pred.knn3 = k.fold.cv(dataset_new,'knn',3)"
"0","pred.knn5 = k.fold.cv(dataset_new,'knn',5)"
"0","pred.nb = k.fold.cv(dataset_new, 'nb')"
"0","pred.svm.radial = k.fold.cv(dataset_new, 'svm.radial',tune = T)"
"0","pred.svm.sigmoid = k.fold.cv(dataset_new, 'svm.sigmoid',tune = T)"
"0","pred.dtree.default = k.fold.cv(dataset_new, 'dtree')"
"0","pred.dtree.prune = k.fold.cv(dataset_new, 'dtree',tune = T)"
"0","pred.ada = k.fold.cv(dataset_new,'ada')"
"0","#get all models measure matrixes"
"0","mat.lr = get.measure.matrix(pred.lr,'lr')"
"0","mat.knn1 = get.measure.matrix(pred.knn1,'knn1')"
"0","mat.knn3 = get.measure.matrix(pred.knn3,'knn3')"
"0","mat.knn5 = get.measure.matrix(pred.knn5,'knn5')"
"0","mat.nb = get.measure.matrix(pred.nb,'nb')"
"0","mat.svm.radial = get.measure.matrix(pred.svm.radial,'svm_radial')"
"0","mat.svm.sigmoid = get.measure.matrix(pred.svm.sigmoid,'svm_sigmoid')"
"0","mat.dtree.default = get.measure.matrix(pred.dtree.default,'dtree_default')"
"0","mat.dtree.prune = get.measure.matrix(pred.dtree.prune,'dtree_prune')"
"0","mat.ada = get.measure.matrix(pred.ada,'ada')"
"0","#show measrure matrix"
"0","mat.all = cbind(mat.lr,mat.knn1,mat.knn3,mat.knn5,mat.nb,mat.svm.radial,mat.svm.sigmoid,mat.dtree.default,mat.dtree.prune,mat.ada)"
"0","mat.all"
"1","         "
"1","        lr"
"1","   knn1"
"1","      knn3"
"1","      knn5"
"1","        nb"
"1"," svm_radial"
"1"," svm_sigmoid"
"1"," dtree_default"
"1","
accuarcy "
"1"," 0.6914145"
"1"," 0.5000"
"1"," 0.5687500"
"1"," 0.5896591"
"1"," 0.6193022"
"1","  0.6913409"
"1","   0.5145692"
"1","     0.7680814"
"1","
precision"
"1"," 0.6176514"
"1"," 0.2800"
"1"," 0.2400357"
"1"," 0.2404809"
"1"," 0.4812289"
"1","  0.6188532"
"1","   0.3507261"
"1","     0.6615424"
"1","
recall   "
"1"," 0.8413109"
"1"," 0.5000"
"1"," 0.3692602"
"1"," 0.3092532"
"1"," 0.7604521"
"1","  0.8426759"
"1","   0.5241843"
"1","     0.6511628"
"1","
fscore   "
"1"," 0.6169733"
"1"," 0.4375"
"1"," 0.2535018"
"1"," 0.2070522"
"1"," 0.5348814"
"1","  0.6181737"
"1","   0.3593103"
"1","     0.6054312"
"1","
auc      "
"1"," 0.9746016"
"1"," 0.5000"
"1"," 0.5350749"
"1"," 0.5303161"
"1"," 0.8105391"
"1","  0.9760897"
"1","   0.5348307"
"1","     0.8521205"
"1","
"
"1","         "
"1"," dtree_prune"
"1","       ada"
"1","
accuarcy "
"1","   0.7690086"
"1"," 0.8122720"
"1","
precision"
"1","   0.6655182"
"1"," 0.7418777"
"1","
recall   "
"1","   0.6460899"
"1"," 0.8080268"
"1","
fscore   "
"1","   0.6040791"
"1"," 0.7019206"
"1","
auc      "
"1","   0.8532754"
"1"," 0.9802246"
"1","
"
