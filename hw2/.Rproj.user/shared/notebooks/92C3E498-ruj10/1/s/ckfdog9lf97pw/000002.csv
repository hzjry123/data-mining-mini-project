"0","my_model<-function(proportion){"
"0","  set.seed(88)"
"0","  fold_length = nrow(german)/10"
"0","  precision = 0"
"0","  accuracy = 0"
"0","  recall = 0"
"0","  F1 = 0"
"0","  best_recall = 0"
"0","  best_vary = c()"
"0","  best_precision = 0"
"0","  best_accuracy = 0"
"0","  best_F1 = 0"
"0","  best_feature = c()"
"0","  german_new = data.frame(german_new)"
"0","  #define the proportion of predictors taken into training"
"0","  for(i in c(rep(proportion,5))){"
"0","    #define feature for training"
"0","    feature = sample(1:length(german_new),floor(length(german_new) * i))"
"0","    accuracy = 0"
"0","    precision = 0"
"0","    recall = 0"
"0","    F1 = 0"
"0","    #kfold"
"0","    for(j in 1: 10){"
"0","      #define data row for training"
"0","      #set 900 for train and validate, 901-1000 for test"
"0","      start_pos = 90*(j -1) + 1"
"0","      end_pos = 90*j"
"0","      data_sample = start_pos:end_pos"
"0","      #split training and test data"
"0","      xtrain = german_new[-data_sample,feature]"
"0","      ytrain = german$V21[-data_sample]"
"0","      xtest = german_new[data_sample,feature]"
"0","      ytest = german$V21[data_sample]"
"0","      #fit the logisitc model"
"0","      ml = glm(V21~.,family=binomial,data=data.frame(V21=ytrain,xtrain))"
"0","      #predict"
"0","      ptest = predict(ml,newdata=data.frame(xtest),type=""response"")"
"0","      #use floor function to clamp the value to 0 or 1"
"0","      btest=floor(ptest+0.5)  "
"0","      #get confusion matrix"
"0","      conf.matrix = table(ytest,btest)"
"0","      #get precision"
"0","      precision = precision + conf.matrix[2,2] / (conf.matrix[2,2]+conf.matrix[1,2])"
"0","      #get accuracy"
"0","      accuracy = accuracy + (conf.matrix[1,1] + conf.matrix[2,2]) / 100"
"0","      #get recall"
"0","      recall = recall + conf.matrix[2,2] / (conf.matrix[2,2]+conf.matrix[2,1])"
"0","      #get F1"
"0","      F1 = F1 + 2 * precision * recall / (precision + recall)"
"0","    }"
"0","      if(recall/10 > best_recall){"
"0","        best_feature = feature"
"0","        best_conf.matrix = conf.matrix"
"0","        best_recall = recall/10"
"0","        best_vary = i"
"0","        best_precision = precision/10"
"0","        best_F1 = F1/10"
"0","        best_accuracy = accuracy/10"
"0","      }"
"0","        "
"0","  }"
"0","  best_model = glm(V21~.,family=binomial,data=data.frame(V21=german$V21,german_new[,sort(best_feature)]))"
"0","  #set 901 - 1000 for test"
"0","  ptest = predict(best_model,newdata=data.frame(german_new[901:1000,]),type=""response"")"
"0","  Curve.Lift(ptest,german$V21[901:1000])"
"0","  Curve.Roc(ptest,german$V21[901:1000])"
"0","  print(best_conf.matrix)"
"0","  print(rbind(best_recall,best_precision,best_F1,best_accuracy))"
"0","  return(best_feature)"
"0","}"
