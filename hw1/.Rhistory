plot(density(student$G2),main="G2")
plot(density(student$G3),main="G3")
library(ggplot2)
ggplot(student,aes(x = student$G3,fill= address))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = student$G3,fill= Pstatus))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = student$G3,fill= activities))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = G3,fill= Pstatus))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = G3,fill= activities))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = G3,fill= higher))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = G3,fill= internet))+geom_density(alpha = 0.5)
activities
student$internet
library(ggplot2)
ggplot(student,aes(x = G3,fill= internet))+geom_density(alpha = 0.5)
fit = lm(student["G3"]~student[c("age","absences","G1","G2","G3")])
fit = lm(student["G3"]~student[c("age","absences","G1","G2","G3")],data=student)
fit = lm(G3~c("age","absences","G1","G2","G3"),data=student)
fit = lm(G3~G2,data=student)
fit = lm(G3~G2,data=student)
summary(fit)
names(student)
names(student)-G3
names(student)-"G3"
fit = lm(G3~.,data=student)
summary(fit)
mean.mse = mean((rep(mean(y),length(y)) - y)^2)
mean.mse = mean((rep(mean(G3),length(G3)) - G3)^2)
G3
model.mse = mean(residuals(fit)^2)
rmse = sqrt(model.mse)
rmse
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
cor(y, fit_A$fitted.values)^2
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
cor(G3, fit_A$fitted.values)^2
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
cor(student$G3, fit_A$fitted.values)^2
cor(student$G3, fit_B$fitted.values)^2
cor(student$G3, fit_C$fitted.values)^2
names(student[,"G3"])
names(student["G3"])
names(student[-"G3"])
names(-student["G3"])
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=school[-train,])
pred_B = predict(fit_B,newdat=school[-train,])
pred_C = predict(fit_C,newdat=school[-train,])
obs = student$G3[-train]
error_A[k] = obs-pred
error_B[k] = obs-pred
error_C[k] = obs-pred
}
n = length(student)
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=school[-train,])
pred_B = predict(fit_B,newdat=school[-train,])
pred_C = predict(fit_C,newdat=school[-train,])
obs = student$G3[-train]
error_A[k] = obs-pred
error_B[k] = obs-pred
error_C[k] = obs-pred
}
n = length(student)
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~student + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~student + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~student + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs-pred
error_B[k] = obs-pred
error_C[k] = obs-pred
}
n = length(student)
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs-pred
error_B[k] = obs-pred
error_C[k] = obs-pred
}
n = length(student)
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs-pred_A
error_B[k] = obs-pred_B
error_C[k] = obs-pred_C
}
n = length(student)
error_A = dim(n)
error_B = dim(n)
error_C = dim(n)
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs-pred_A
error_B[k] = obs-pred_B
error_C[k] = obs-pred_C
}
sqrt(mean(error_A^2))
sqrt(mean(error_B^2))
sqrt(mean(error_C^2))
fit_poly = lm(G3 ~ G2 + I(G2^2), data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ G1+G2 +I(G1*G2), data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=3), data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=2), data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1+absences,degree=2), data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1+absences+famrel,degree=2), data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1+famrel,degree=2), data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=2), data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=2)+famrel+absences, data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=2)+famrel+absences,G1,G2, data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=2)+famrel+absences, data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ famrel+absences,G1,G2, data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ famrel,absences,G1,G2, data=student)
fit_poly = lm(G3 ~ famrel+absences,G1,G2, data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ famrel+absences+G1+G2, data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=2)+famrel+absences+G1+G2, data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=2)+famrel+absences,G1,G2, data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1,degree=2)+famrel+absences,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(G2+G1+famrel+absences,degree=2),data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(Pstatus+address,degree=2)+famrel+absences+G1+G2,data=student)
fit_poly = lm(G3 ~ poly(Pstatus,degree=2)+famrel+absences+G1+G2,data=student)
fit_poly = lm(G3 ~ poly(studytime,degree=2)+famrel+absences+G1+G2+address,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime,G1,G2,degree=2)+famrel+absences+G1+G2+address,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime,degree=2)+famrel+absences+G1+G2+address,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime,G1,degree=2)+famrel+absences+address,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime,G2,degree=2)+famrel+absences+address,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime,G2,degree=2)+famrel+absences+address+G1,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G2,degree=2)+famrel+absences+address+G1,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G2+activitiesyes,degree=2)+famrel+absences+address+G1,data=student)
fit_poly = lm(G3 ~ poly(studytime+G2+,degree=2)+famrel+absences+address+G1+activitiesyes,data=student)
fit_poly = lm(G3 ~ poly(studytime+G2+G1,degree=2)+famrel+absences+address+activitiesyes,data=student)
fit_poly = lm(G3 ~ poly(studytime+G2+G1,degree=2)+famrel+absences+address+activities,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1,degree=2)+famrel+absences+address+activities+G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)++absences+address+activities+G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel+address,degree=2)++absences+activities+G2,data=student)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel+address,degree=2)+absences+activities+G2,data=student)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)+address+absences+activities+G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)+school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)+school + sex + age + address + Pstatus + Medu + Fedu  + traveltime + studytime + failures + absences + G1 + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)+school + sex + age + address + Pstatus  + traveltime + studytime + failures + absences + G1 + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)+school + sex + age + address   + traveltime + studytime + failures + absences + G1 + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)+school + sex + age + studytime + failures + absences + G1 + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)+school+ age + studytime + failures + absences + G1 + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2)+school+ age + studytime + failures + absences + G2,data=student)
summary(fit_poly)
summary(student)
numerical_data = as.data.frame(student[,c("G2", "G1",
"G3", "absences", "age")])
numerical_data = as.data.frame(student[,c("G2", "G1",
"G3", "absences", "age")])
cor(numerical_data)
numerical_data = as.data.frame(student[,c("G3", "G1",
"G2", "absences", "age")])
cor(numerical_data)
numerical_data = as.data.frame(student[,c("G3", "G1",
"G2", "absences", "age","studytime")])
cor(numerical_data)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel+ school+ age + studytime + failures + absences + G2,degree=2) ,data=student)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel+G2,degree=2) + school+ age + studytime + failures + absences,data=student)
summary(fit_poly)
student
n = length(student)
error_A = dim(n)
error_B = dim(n)
error_C = dim(n)
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs-pred_A
error_B[k] = obs-pred_B
error_C[k] = obs-pred_C
sqrt(mean(error_A^2))
sqrt(mean(error_B^2))
sqrt(mean(error_C^2))
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
n = length(student)
error_A = dim(n)
error_B = dim(n)
error_C = dim(n)
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs-pred_A[1]
error_B[k] = obs-pred_B[1]
error_C[k] = obs-pred_C[1]
}
sqrt(mean(error_A^2))
sqrt(mean(error_B^2))
sqrt(mean(error_C^2))
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs[1]-pred_A[1]
error_B[k] = obs[1]-pred_B[1]
error_C[k] = obs[1]-pred_C[1]
n = length(student)
error_A = dim(n)
error_B = dim(n)
error_C = dim(n)
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs[1]-pred_A[1]
error_B[k] = obs[1]-pred_B[1]
error_C[k] = obs[1]-pred_C[1]
}
sqrt(mean(error_A^2))
sqrt(mean(error_B^2))
sqrt(mean(error_C^2))
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2) + school+ age + studytime +  absences + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2) + school+ age + studytime + failures + absences + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2) + school+ age + studytime+ absences + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel+ failures,degree=2) + school+ age + studytime  + absences + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel + studytime ,degree=2) + school+ age+ failures + absences + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=3) + school+ age + studytime + failures + absences + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel + school,degree=2)+ age + studytime + failures + absences + G2,data=student)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel+ age + studytime + failures + absences + G2,degree=2) + school,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel,degree=2) + school+ age + studytime + failures + absences + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+G1+famrel+ absences ,degree=2) + school+ age + studytime + failures + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(studytime+famrel+ absences ,degree=2) + school+ age + studytime + G1+failures + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(absences ,degree=2)+studytime+famrel+ + school+ age + studytime + G1+failures + G2,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(absences ,degree=2)+studytime+famrel+ + school+ age + studytime + G1+failures + G2+higher,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(absences ,degree=2)+~,data=student)
fit_poly = lm(G3 ~ poly(absences ,degree=2)+.,data=student)
summary(fit_poly)
fit_poly = lm(G3 ~ poly(absences ,degree=2)+.,data=student)
stepAIC(fit_poly, direction="backward")
library(MASS)
fit_poly = lm(G3 ~ poly(absences ,degree=2)+.,data=student)
stepAIC(fit_poly, direction="backward")
lm(formula = G3 ~ poly(absences, degree = 2) + school + age +
failures + activities + romantic + famrel + G1 + G2, data = student)
sk = lm(formula = G3 ~ poly(absences, degree = 2) + school + age +
failures + activities + romantic + famrel + G1 + G2, data = student)
summary(sk)
plot(sk)
sk = lm(formula = G3 ~ poly(absences, degree = 2) + school + age +
failures + activities + romantic + famrel + G1 + G2, data = student)
summary(sk)
fit <- locfit(G3~lp(.,nn=0.5),data=student)
library(locfit)
library(locfit)
library(locfit)
install.packages(localfit)
install.packages("localfit")
library(locfit)
plot(student)
library(lars)
install.packages(lars)
install.packages("lars")
library(lars)
lar<- lars(student,G3,trace = TRUE)
lars(matrix(student),G3,trace = TRUE)
matrix(student)
student
ma = matrix(student)
ma
help(cbind)
student[,-1]
student[,1]
student[,-2]
student[,-"G3"]
student[,-G3]
student[,-length(student)]
cbind(student[,-length(student)])
he = cbind(student[,-length(student)])
he
typeof(he)
matrix(he)
head.matrix()
head.matrix()
he.matrix()
data.matrix(he)
type(data.matrix(he))
typeof(data.matrix(he))
la = data.matrix(he)
lasso <- lars(x=la,y=G3,trace = TRUE)
lasso <- lars(x=la,y=student$G3,trace = TRUE)
summary(lasso)
plot(lasso)
cv.lm()
cv.lars(x = la, x=la,y=student$G3,trace = TRUE,K=10)
cv.lars( x=la,y=student$G3,trace = TRUE,K=10)
summary(lasso)
lasso_data = cbind(student[,-length(student)])
lasso_model = cv.lars( x=lass_data,y=student$G3,trace = TRUE,K=10)
lasso_data = cbind(student[,-length(student)])
lasso_model = cv.lars( x=lasso_data,y=student$G3,trace = TRUE,K=10)
lasso_data = data.matrix((student[,-length(student)]))
lasso_model = cv.lars( x=lasso_data,y=student$G3,trace = TRUE,K=10)
summary(lasso_model)
libaray(lars)
library(lars)
lasso_data = data.matrix((student[,-length(student)]))
lasso_model = cv.lars( x=lasso_data,y=student$G3,trace = TRUE,K=10)
summary(lasso_model)
library(lars)
lasso_data = data.matrix((student[,-length(student)]))
lasso_model = lars( x=lasso_data,y=student$G3,trace = TRUE)
summary(lasso_model)
library(lars)
lasso_data = data.matrix((student[,-length(student)]))
lasso_model = lars( x=lasso_data,y=student$G3,trace = TRUE)
lasso_model
summary(sk)
student <- read.csv("student-mat.csv",header = TRUE, sep = ";")
names(student[,-length(student))
student <- read.csv("student-mat.csv",header = TRUE, sep = ";")
names(student[,-length(student)])
library(MASS)
lm(formula = G3 ~ poly(absences, degree = 2) + ., data = student)
stepAIC(lm, direction="backward")
library(MASS)
back = lm(formula = G3 ~ poly(absences, degree = 2) + ., data = student)
stepAIC(back, direction="backward")
library(MASS)
back = lm(formula = G3 ~ poly(absences, degree = 2) + ., data = student)
stepAIC(back, direction="backward")
student <- read.csv("student-mat.csv",header = TRUE, sep = ";")
names(student[,-length(student)])
summary1 <- apply(student[,c("age","absences","G1","G2","G3")], 2, summary)
sd <-apply(student[,c("age","absences","G1","G2","G3")], 2, sd)
result_a <- rbind(summary1,sd)
result_a
par(mfrow=c(2,3))
plot(density(student$age), main = "age")
plot(density(student$absences),main = "absences")
plot(density(student$G1),main="G1")
plot(density(student$G2),main="G2")
plot(density(student$G3),main="G3")
numerical_data = as.data.frame(student[,c("G3", "G1",
"G2", "absences", "age","studytime")])
cor(numerical_data)
cor(student$G3,student$G2)
library(ggplot2)
ggplot(student,aes(x=G2,y=G3))+geom_point()
cor(student$G3,student$G1)
library(ggplot2)
ggplot(student,aes(x=G1,y=G3))+geom_point()
cor(student$G3,student$age)
library(ggplot2)
ggplot(student,aes(x=age,y=G3))+geom_point()
cor(student$G3,student$absences)
library(ggplot2)
ggplot(student,aes(x=absences,y=G3))+geom_point()
library(ggplot2)
ggplot(student,aes(x = G3,fill= address))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = G3,fill= Pstatus))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = G3,fill= activities))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = G3,fill= higher))+geom_density(alpha = 0.5)
library(ggplot2)
ggplot(student,aes(x = G3,fill= internet))+geom_density(alpha = 0.5)
fit = lm(G3~.,data=student)
summary(fit)
model.mse = mean(residuals(fit)^2)
rmse = sqrt(model.mse)
rmse
n = length(student)
error_A = dim(n)
error_B = dim(n)
error_C = dim(n)
for(k in 1:n){
train1 = c(1:n)
train = train1[train1 != k]
fit_A = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + studytime + failures + absences + G1 + G2,data = student)
fit_B = lm(G3~school + sex + age + failures + absences + G1 + G2,data = student)
fit_C = lm(G3~school + sex + age + address + Pstatus + Medu + Fedu + Mjob + Fjob + traveltime + G1 + G2,data = student)
pred_A = predict(fit_A,newdat=student[-train,])
pred_B = predict(fit_B,newdat=student[-train,])
pred_C = predict(fit_C,newdat=student[-train,])
obs = student$G3[-train]
error_A[k] = obs[1]-pred_A[1]
error_B[k] = obs[1]-pred_B[1]
error_C[k] = obs[1]-pred_C[1]
}
sqrt(mean(error_A^2))
sqrt(mean(error_B^2))
sqrt(mean(error_C^2))
