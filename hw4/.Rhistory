#apply kmeans with k = 3
#generate mds plot
my.mds<-function(dataset,name="default",col=c()){
dataset.dist = dist(dataset[,])
dataset.mds <- cmdscale(dataset.dist)
plot(dataset.mds, type = 'n',main = paste(name,"mds",sep = " "))
text(dataset.mds, labels=row.names(dataset), col=1)
}
#load data
stock = t(load.data("stockprice"))
stock = data.frame(stock)
#plot pca
my.pca(stock,name = "stock")
#plot mds
my.mds(stock,name="stock")
#apply kmeans with k = 3
#generate mds plot
my.mds<-function(dataset,name="default",col=c()){
dataset.dist = dist(dataset[,])
dataset.mds <- cmdscale(dataset.dist)
plot(dataset.mds, type = 'n',main = paste(name,"mds",sep = " "))
text(dataset.mds, labels=row.names(dataset), col=col)
}
#load data
stock = t(load.data("stockprice"))
stock = data.frame(stock)
#plot pca
my.pca(stock,name = "stock")
#plot mds
my.mds(stock,name="stock")
#apply kmeans with k = 3
#generate mds plot
my.mds<-function(dataset,name="default",col=c()){
dataset.dist = dist(dataset[,])
dataset.mds <- cmdscale(dataset.dist)
plot(dataset.mds, type = 'n',main = paste(name,"mds",sep = " "))
text(dataset.mds, labels=row.names(dataset), col=col+2)
}
#load data
stock = t(load.data("stockprice"))
stock = data.frame(stock)
#plot pca
my.pca(stock,name = "stock")
#plot mds
my.mds(stock,name="stock")
#apply kmeans with k = 3
c()+2
c()
#generate mds plot
my.mds<-function(dataset,name="default",col=c()){
dataset.dist = dist(dataset[,])
dataset.mds <- cmdscale(dataset.dist)
plot(dataset.mds, type = 'n',main = paste(name,"mds",sep = " "))
if(col!=NULL)col = col + 2
text(dataset.mds, labels=row.names(dataset), col=col)
}
#load data
stock = t(load.data("stockprice"))
stock = data.frame(stock)
#plot pca
my.pca(stock,name = "stock")
#plot mds
my.mds(stock,name="stock")
c()
is.null(c())
col()
col
#generate mds plot
my.mds<-function(dataset,name="default",col=c()){
dataset.dist = dist(dataset[,])
dataset.mds <- cmdscale(dataset.dist)
plot(dataset.mds, type = 'n',main = paste(name,"mds",sep = " "))
if(is.null(col))col = col + 2
text(dataset.mds, labels=row.names(dataset), col=col)
}
#load data
stock = t(load.data("stockprice"))
stock = data.frame(stock)
#plot pca
my.pca(stock,name = "stock")
#plot mds
my.mds(stock,name="stock")
#apply kmeans with k = 3
#generate mds plot
my.mds<-function(dataset,name="default",col=c()){
dataset.dist = dist(dataset[,])
dataset.mds <- cmdscale(dataset.dist)
plot(dataset.mds, type = 'n',main = paste(name,"mds",sep = " "))
if(!is.null(col))col = col + 2
text(dataset.mds, labels=row.names(dataset), col=col)
}
#load data
stock = t(load.data("stockprice"))
stock = data.frame(stock)
#plot pca
my.pca(stock,name = "stock")
#plot mds
my.mds(stock,name="stock")
#apply kmeans with k = 3
#load data
stock = t(load.data("stockprice"))
stock = data.frame(stock)
#plot pca
stock = scale(stock,center = T,scale = T)
my.pca(stock,name = "stock")
#plot mds
my.mds(stock,name="stock")
#apply kmeans with k = 3
my.kmeans(stock,"stock kmeans 3")
#apply kmenas with k = 6
my.kmeans(stock,"stock kmeans 6",6)
#apply h-cluster with single link, k = 3
hc=my.hcluster(stock,"single",k=3)
#apply h-cluster with single link, k = 6
hc=my.hcluster(stock,"single",k=6)
#apply h-cluster with complete link, k = 3
hc=my.hcluster(stock,"complete",k=3)
#apply h-cluster with complete link, k = 6
hc=my.hcluster(stock,"complete",k=6)
#apply h-cluster with average link, k = 3
hc=my.hcluster(stock,"average",k=3)
#apply h-cluster with average link, k = 6
hc=my.hcluster(stock,"average",k=6)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
my.mds(senator.scale,name="senator 113",col = congress$party)
#Compare the clustering results with the party labels and identify the party members who are assigned to a seemly wrong cluster. Specifically, based on the k-means results, which Republicans are clustered together with Democrats, and vice versa? And based on the three variants (single-link, complete-link and average-link), which Republicans are clustered together with Democrats, and vice versa?
kmeans = my.kmeans(senator.scale,"stock kmeans 2",2)
hc.single=my.hcluster(senator.scale,"single",k=2)
hc.complete=my.hcluster(senator.scale,"complete",k=2)
hc.average=my.hcluster(senator.scale,"average",k=2)
evaluation.data = list(kmeans,hc.single,hc.complete,hc.average)
evaluation.list = lapply(evaluation.data, function(f)as.matrix(c(cluster.purity(f,congress$party),cluster.entropy(f,congress$party))))
evalutaion.table <- data.frame(lapply(evaluation.list,as.double))
names(evalutaion.table) <- c('kmeans','hc.single','hc.complete','hc.average')
row.names(evalutaion.table) <- c('purity','entropy')
evalutaion.table
View(senator.scale)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party)
#Compare the clustering results with the party labels and identify the party members who are assigned to a seemly wrong cluster. Specifically, based on the k-means results, which Republicans are clustered together with Democrats, and vice versa? And based on the three variants (single-link, complete-link and average-link), which Republicans are clustered together with Democrats, and vice versa?
kmeans = my.kmeans(senator.scale,"stock kmeans 2",2)
hc.single=my.hcluster(senator.scale,"single",k=2)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
#senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party)
#Compare the clustering results with the party labels and identify the party members who are assigned to a seemly wrong cluster. Specifically, based on the k-means results, which Republicans are clustered together with Democrats, and vice versa? And based on the three variants (single-link, complete-link and average-link), which Republicans are clustered together with Democrats, and vice versa?
kmeans = my.kmeans(senator.scale,"stock kmeans 2",2)
# Use k-means and hierarchical clustering to group stocks. Specifically, you will generate 8 MDS maps for the stocks and color the stocks based on different clustering methods (k-means, h-clustering with single-link, h-clustering with complete-link, h-clustering with average-link) and different number of clusters (k = 3, k = 6). For each hierarchical clustering method, generate a dendrogram.
#hint: Standardize the data before performing clustering
my.kmeans<-function(dataset,name="default",centers=3){
set.seed(1)
#dataset = scale(dataset,center = T,scale = T)
kmeans.result = kmeans(dataset,centers = centers,nstart=10)
#print(order(kmeans.result$cluster))
#print(kmeans.result$cluster)
#result = data.frame(kmeans.result$cluster[o])
my.mds(dataset,name,col = kmeans.result$cluster)
kmeans.result$cluster
}
#Compare the clustering results with the party labels and identify the party members who are assigned to a seemly wrong cluster. Specifically, based on the k-means results, which Republicans are clustered together with Democrats, and vice versa? And based on the three variants (single-link, complete-link and average-link), which Republicans are clustered together with Democrats, and vice versa?
kmeans = my.kmeans(senator.scale,"stock kmeans 2",2)
hc.single=my.hcluster(senator.scale,"single",k=2)
my.hcluster<-function(dataset,method='average',k=3){
#dataset = scale(dataset)
dataset.dist = dist(dataset)
hc = cutree(hclust(dataset.dist,method = method),k)
my.mds(dataset,name = paste('h-cluster k =',k,'method = ',method,sep = " "),col = hc)
hc
}
hc.single=my.hcluster(senator.scale,"single",k=2)
hc.complete=my.hcluster(senator.scale,"complete",k=2)
hc.average=my.hcluster(senator.scale,"average",k=2)
evaluation.data = list(kmeans,hc.single,hc.complete,hc.average)
evaluation.list = lapply(evaluation.data, function(f)as.matrix(c(cluster.purity(f,congress$party),cluster.entropy(f,congress$party))))
evalutaion.table <- data.frame(lapply(evaluation.list,as.double))
names(evalutaion.table) <- c('kmeans','hc.single','hc.complete','hc.average')
row.names(evalutaion.table) <- c('purity','entropy')
evalutaion.table
#apply h-cluster with single link, k = 3
hc=my.hcluster(stock,"single",k=3)
#apply h-cluster with single link, k = 6
hc=my.hcluster(stock,"single",k=6)
#apply h-cluster with complete link, k = 3
hc=my.hcluster(stock,"complete",k=3)
#apply h-cluster with complete link, k = 6
hc=my.hcluster(stock,"complete",k=6)
#apply h-cluster with average link, k = 3
hc=my.hcluster(stock,"average",k=3)
#apply h-cluster with average link, k = 6
hc=my.hcluster(stock,"average",k=6)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
# senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party)
View(senator.scale)
View(senator)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party)
View(congress)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13],row.names = congress$name)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13],row.names = congress.names)
congress.names
congress$name
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party)
#generate mds plot
my.mds<-function(dataset,name="default",col=c(),label=NULL){
dataset.dist = dist(dataset[,])
dataset.mds <- cmdscale(dataset.dist)
plot(dataset.mds, type = 'n',main = paste(name,"mds",sep = " "))
if(!is.null(col))col = col + 2
if(is.null(label))text(dataset.mds, labels=row.names(dataset), col=col)
else text(dataset.mds, labels=label, col=col)
}
# Use k-means and hierarchical clustering to group stocks. Specifically, you will generate 8 MDS maps for the stocks and color the stocks based on different clustering methods (k-means, h-clustering with single-link, h-clustering with complete-link, h-clustering with average-link) and different number of clusters (k = 3, k = 6). For each hierarchical clustering method, generate a dendrogram.
#hint: Standardize the data before performing clustering
my.kmeans<-function(dataset,name="default",centers=3,label = NULL){
set.seed(1)
#dataset = scale(dataset,center = T,scale = T)
kmeans.result = kmeans(dataset,centers = centers,nstart=10)
#print(order(kmeans.result$cluster))
#print(kmeans.result$cluster)
#result = data.frame(kmeans.result$cluster[o])
my.mds(dataset,name,col = kmeans.result$cluster,label = label)
kmeans.result$cluster
}
my.hcluster<-function(dataset,method='average',k=3,label=NULL){
#dataset = scale(dataset)
dataset.dist = dist(dataset)
hc = cutree(hclust(dataset.dist,method = method),k)
my.mds(dataset,name = paste('h-cluster k =',k,'method = ',method,sep = " "),col = hc,label = label)
hc
}
#load data
stock = t(load.data("stockprice"))
stock = data.frame(stock)
#plot pca
stock = scale(stock,center = T,scale = T)
my.pca(stock,name = "stock")
#plot mds
my.mds(stock,name="stock")
#apply kmeans with k = 3
my.kmeans(stock,"stock kmeans 3")
#apply kmenas with k = 6
my.kmeans(stock,"stock kmeans 6",6)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
congress$party[congress$party == 100] <- 2
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party,label = congress$name)
#Compare the clustering results with the party labels and identify the party members who are assigned to a seemly wrong cluster. Specifically, based on the k-means results, which Republicans are clustered together with Democrats, and vice versa? And based on the three variants (single-link, complete-link and average-link), which Republicans are clustered together with Democrats, and vice versa?
kmeans = my.kmeans(senator.scale,"stock kmeans 2",2,label = congress$name)
hc.single=my.hcluster(senator.scale,"single",k=2,label = congress$name)
hc.complete=my.hcluster(senator.scale,"complete",k=2,label = congress$name)
hc.average=my.hcluster(senator.scale,"average",k=2,label=congress$name)
evaluation.data = list(kmeans,hc.single,hc.complete,hc.average)
evaluation.list = lapply(evaluation.data, function(f)as.matrix(c(cluster.purity(f,congress$party),cluster.entropy(f,congress$party))))
evalutaion.table <- data.frame(lapply(evaluation.list,as.double))
names(evalutaion.table) <- c('kmeans','hc.single','hc.complete','hc.average')
row.names(evalutaion.table) <- c('purity','entropy')
evalutaion.table
View(senator)
View(senator.data)
#Compare the clustering results with the party labels and identify the party members who are assigned to a seemly wrong cluster. Specifically, based on the k-means results, which Republicans are clustered together with Democrats, and vice versa? And based on the three variants (single-link, complete-link and average-link), which Republicans are clustered together with Democrats, and vice versa?
kmeans.senator = my.kmeans(senator.scale,"stock kmeans 2",2,label = congress$name)
kmeans.senator
c(kmeans.senator!=congress$party)
congress$party
c(kmeans.senator!=congress$party)
kmeans.senator
c(kmeans.senator)
type(kmeans.senator)
typeof(kmeans.senator)
as.array(kmeans.senator)
c(kmeans.senator==congress$party)
congress.names(c(kmeans.senator==congress$party))
congress.names[c(kmeans.senator==congress$party)]
congress.names[c(kmeans.senator==congress$party)==FALSE]
congress.names[c(kmeans.senator==congress$party)==FALSE && congress$party ==1]
congress.names[c(kmeans.senator==congress$party)==FALSE && congress$party ==0]
congress.names[c(kmeans.senator==congress$party)==FALSE && congress$party ==2]
congress.names[c(kmeans.senator==congress$party)==FALSE && c(congress$party ==2)]
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
congress.names
congress$party
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
#assign the colors just to visualize clearly.
congress$party[congress$party == 100] <- 3
congress$party[congress$party == 200] <- 1
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party,label = congress$name)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
#assign the colors just to visualize clearly.
congress$party[congress$party == 100] <- 2 #republican
congress$party[congress$party == 200] <- 1 #democrats
congress$party[congress$party == 328] <- 8
print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party,label = congress$name)
#senator.113dist = lapply(scale(data.frame(senator.simple[13])), function(m) dist(m %*% t(m)))
#my.mds(data.frame(senator.simple[13]),name="senator 113",)
congress = subset(senator.data[[13]], state < 99)
congress.names = sapply(as.character(congress$name),
function(n) strsplit(n, "[, ]")[[1]][1])
#assign the colors just to visualize clearly.
congress$party[congress$party == 100] <- 2 #republican
congress$party[congress$party == 200] <- 1 #democrats
congress$party[congress$party == 328] <- 8
#print(congress$party)
#senator.scale = scale(data.frame(senator.simple[13]),center = T,scale = T)
senator.scale = data.frame(senator.simple[13])
my.mds(senator.scale,name="senator 113",col = congress$party,label = congress$name)
#Compare the clustering results with the party labels and identify the party members who are assigned to a seemly wrong cluster. Specifically, based on the k-means results, which Republicans are clustered together with Democrats, and vice versa? And based on the three variants (single-link, complete-link and average-link), which Republicans are clustered together with Democrats, and vice versa?
kmeans.senator = my.kmeans(senator.scale,"stock kmeans 2",2,label = congress$name)
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==1)]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==1)][]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==1)][:1]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==1)][:1]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==1)][,1]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==1)]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(hc.single==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(hc.single==congress$party)==FALSE & c(congress$party ==1)]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(hc.complete==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(hc.complete==congress$party)==FALSE & c(congress$party ==1)]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(hc.average==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(hc.average==congress$party)==FALSE & c(congress$party ==1)]
print("hc.single with k = 2")
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(hc.single==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(hc.single==congress$party)==FALSE & c(congress$party ==1)]
hc.complete=my.hcluster(senator.scale,"complete",k=2,label = congress$name)
print("hc.complete with k = 2")
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(hc.complete==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(hc.complete==congress$party)==FALSE & c(congress$party ==1)]
#which Republicans are clustered together with Democrats
print("hc.average with k = 2")
print("which Republicans are clustered together with Democrats")
congress.names[c(hc.average==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(hc.average==congress$party)==FALSE & c(congress$party ==1)]
#which Republicans are clustered together with Democrats
print("which Republicans are clustered together with Democrats")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==2)]
#which Democrats are clustered together with Republicans
print("which Democrats are clustered together with Republicans")
congress.names[c(kmeans.senator==congress$party)==FALSE & c(congress$party ==1)]
evaluation.data = list(kmeans.senator,hc.single,hc.complete,hc.average)
evaluation.list = lapply(evaluation.data, function(f)as.matrix(c(cluster.purity(f,congress$party),cluster.entropy(f,congress$party))))
evalutaion.table <- data.frame(lapply(evaluation.list,as.double))
names(evalutaion.table) <- c('kmeans','hc.single','hc.complete','hc.average')
row.names(evalutaion.table) <- c('purity','entropy')
evalutaion.table
